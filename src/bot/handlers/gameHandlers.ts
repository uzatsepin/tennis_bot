import { Context, SessionFlavor } from 'grammy';
import * as gameModel from '../../models/GameModel';
import * as userModel from '../../models/UserModel';
import { BotSession, Game, GameStatus } from '../../models/types';
import { createBackToMenuKeyboard, createSelectGameKeyboard } from '../keyboards';
import { InlineKeyboard } from 'grammy';

type BotContext = Context & SessionFlavor<BotSession>;

/**
 * –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –≥—Ä—É"
 */
export async function handleScheduleGame(ctx: BotContext): Promise<void> {
  ctx.session.step = 'schedule_game_username';
  ctx.session.gameData = {};
  
  await ctx.editMessageText('üë• –ó –∫–∏–º –±–∞–∂–∞—î—Ç–µ –∑—ñ–≥—Ä–∞—Ç–∏? –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∞—à–æ–≥–æ –æ–ø–æ–Ω–µ–Ω—Ç–∞.\n\n–ü—Ä–∏–∫–ª–∞–¥ @username');
}

/**
 * –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–¥–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
 */
export async function handleAddResult(ctx: BotContext): Promise<void> {
  const user = ctx.from;
  if (!user) return;
  
  try {
    const pendingGames = await gameModel.getUserPendingGames(user.id);
    
    if (pendingGames.length === 0) {
      await ctx.editMessageText('‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö —ñ–≥–æ—Ä. –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø–ª–∞–Ω—É–π—Ç–µ –≥—Ä—É!', {
        reply_markup: createBackToMenuKeyboard()
      });
      return;
    }
    
    const keyboard = createSelectGameKeyboard(pendingGames, user.id);
    
    ctx.session.step = 'add_result_select';
    await ctx.editMessageText('üîç –í–∏–±–µ—Ä—ñ—Ç—å –≥—Ä—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤:', {
      reply_markup: keyboard
    });
  } catch (error) {
    console.error('Error in handleAddResult:', error);
    await ctx.editMessageText('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–∞—à–∏—Ö —ñ–≥–æ—Ä. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.', {
      reply_markup: createBackToMenuKeyboard()
    });
  }
}

/**
 * –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –≥—Ä–∏ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
 */
export async function handleGameSelect(ctx: BotContext): Promise<void> {
  const gameId = ctx.match?.[1];
  if (!gameId) return;
  
  console.log(`Processing game_select with gameId: ${gameId}`);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–≥—Ä–∞ —Å —Ç–∞–∫–∏–º ID
    const game = await gameModel.getGameById(gameId);
    console.log(`Game found for ID ${gameId}:`, game);
    
    if (!game) {
      await ctx.editMessageText('‚ùå –ì—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.', {
        reply_markup: createBackToMenuKeyboard()
      });
      return;
    }
    
    ctx.session.step = 'add_result_score';
    ctx.session.gameData = { 
      ...ctx.session.gameData,
      gameId
    };
    
    await ctx.editMessageText('üìù –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ä–∞—Ö—É–Ω–æ–∫ –º–∞—Ç—á—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "6:4, 7:5").\n\n–û–±–æ–≤ º—è–∑–∫–æ–≤–æ –±—ñ–ª—å—à–∏–π —Ä–∞—Ö—É–Ω–æ–∫ –º–∞—î –±—É—Ç–∏ –ø–µ—Ä—à–∏–º', {
      reply_markup: createBackToMenuKeyboard()
    });
  } catch (error) {
    console.error(`Error handling game selection for ID ${gameId}:`, error);
    await ctx.editMessageText('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –≥—Ä–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.', {
      reply_markup: createBackToMenuKeyboard()
    });
  }
}

/**
 * –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –ø–µ—Ä–µ–º–æ–∂—Ü—è
 */
export async function handleWinnerSelect(ctx: BotContext): Promise<void> {
  const winnerId = Number(ctx.match?.[1]);
  const gameId = ctx.session.gameData?.gameId;
  const score = ctx.session.gameData?.score;
  
  if (!gameId || !score) return;
  
  try {
    const game = await gameModel.getGameById(gameId);
    if (!game) {
      await ctx.editMessageText('‚ùå –ì—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.', {
        reply_markup: createBackToMenuKeyboard()
      });
      return;
    }
    
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—Ä–∏ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    await gameModel.updateGame(gameId, {
      status: GameStatus.COMPLETED,
      score,
      winnerId,
      updatedAt: new Date()
    });
    
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä–∞–≤—Ü—ñ–≤
    await userModel.updateUserStats(game.player1Id, game.player1Id === winnerId);
    await userModel.updateUserStats(game.player2Id, game.player2Id === winnerId);
    
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—ñ–≤
    const rankingModel = await import('../../models/RankingModel');
    await rankingModel.updateRankings();
    
    await ctx.editMessageText(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ! üèÜ –ì—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑ —Ä–∞—Ö—É–Ω–∫–æ–º: ${score}`, {
      reply_markup: createBackToMenuKeyboard()
    });
    
    // –û—á–∏—â–µ–Ω–Ω—è —Å–µ—Å—ñ—ó
    ctx.session = {};
  } catch (error) {
    console.error('Error in handleWinnerSelect:', error);
    await ctx.editMessageText('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.', {
      reply_markup: createBackToMenuKeyboard()
    });
  }
}

/**
 * –û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –¥—ñ–∞–ª–æ–≥—É –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –≥—Ä–∏
 */
export async function handleScheduleGameFlow(ctx: BotContext, text: string): Promise<void> {
  const user = ctx.from;
  if (!user) return;
  
  switch (ctx.session.step) {
    case 'schedule_game_username':
      const opponentUsername = text.replace('@', '');
      
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º username
      const opponent = await userModel.findUserByUsername(opponentUsername);
      if (!opponent) {
        await ctx.reply('‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º —ñ–º\'—è–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ –Ω–∞—à—ñ–π –±–∞–∑—ñ –¥–∞–Ω–∏—Ö. –ú–æ–∂–ª–∏–≤–æ, –≤—ñ–Ω —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –≤ –±–æ—Ç—ñ. –ó–∞–ø—Ä–æ–ø–æ–Ω—É–π—Ç–µ –π–æ–º—É –ø–æ—á–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º, –≤–∏–∫–æ–Ω–∞–≤—à–∏ –∫–æ–º–∞–Ω–¥—É /start.');
        return;
      }
      
      ctx.session.gameData = {
        ...ctx.session.gameData,
        opponentUsername
      };
      ctx.session.step = 'schedule_game_time';
      await ctx.reply('üóìÔ∏è –ö–æ–ª–∏ –≤–∏ —Ö–æ—Ç—ñ–ª–∏ –± –≥—Ä–∞—Ç–∏? –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —á–∞—Å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "2023-05-30 15:00")');
      break;
      
    case 'schedule_game_time':
      try {
        const scheduledTime = new Date(text);
        
        if (isNaN(scheduledTime.getTime())) {
          await ctx.reply('‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –†–†–†–†-–ú–ú-–î–î –ì–ì:–•–• (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "2023-05-30 15:00")');
          return;
        }
        
        ctx.session.gameData = {
          ...ctx.session.gameData,
          scheduledTime
        };
        
        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ–ø–æ–Ω–µ–Ω—Ç–∞ –∑–∞ —ñ–º'—è–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const opponentUsername = ctx.session.gameData?.opponentUsername;
        if (!opponentUsername) {
          throw new Error('–Ü–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ');
        }
        
        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ–ø–æ–Ω–µ–Ω—Ç–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
        const opponent = await userModel.findUserByUsername(opponentUsername);
        if (!opponent) {
          await ctx.reply('‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º —ñ–º\'—è–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ –Ω–∞—à—ñ–π –±–∞–∑—ñ –¥–∞–Ω–∏—Ö. –ú–æ–∂–ª–∏–≤–æ, –≤—ñ–Ω —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –≤ –±–æ—Ç—ñ.');
          return;
        }
        
        const newGame: Omit<Game, '_id'> = {
          player1Id: user.id,
          player1Username: user.username || `user_${user.id}`,
          player2Id: opponent.telegramId,
          player2Username: opponentUsername,
          scheduledTime,
          status: GameStatus.PENDING, // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
          createdAt: new Date(),
          updatedAt: new Date(),
          createdBy: user.id
        };
        
        const game = await gameModel.createGame(newGame);
        
        await ctx.reply(`üì® –ó–∞–ø–∏—Ç –Ω–∞ –≥—Ä—É –∑ @${opponentUsername} –Ω–∞ ${scheduledTime.toLocaleString()} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. ‚è≥ –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥ –æ–ø–æ–Ω–µ–Ω—Ç–∞.`, {
          reply_markup: createBackToMenuKeyboard()
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–ø–æ–Ω–µ–Ω—Ç—É
        const gameId = game._id?.toString();
        if (gameId) {
          try {
            const keyboard = new InlineKeyboard()
              .text('‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', `confirm_game:${gameId}`).row()
              .text('‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏', `reject_game:${gameId}`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–ø–æ–Ω–µ–Ω—Ç—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º id –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞)
            await ctx.api.sendMessage(
              opponent.telegramId,
              `üéæ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @${user.username || user.first_name} —Ö–æ—á–µ –∑—ñ–≥—Ä–∞—Ç–∏ –∑ –≤–∞–º–∏ –≤ —Ç–µ–Ω—ñ—Å ${scheduledTime.toLocaleString()}. –ë–∞–∂–∞—î—Ç–µ –ø—Ä–∏–π–Ω—è—Ç–∏ —Ü—é –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é?`,
              { reply_markup: keyboard }
            );
          } catch (error) {
            console.error('Error sending invitation to opponent:', error);
            await ctx.reply('‚ö†Ô∏è –ó–∞–ø–∏—Ç –Ω–∞ –≥—Ä—É —Å—Ç–≤–æ—Ä–µ–Ω–æ, –∞–ª–µ –Ω–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–ø–æ–Ω–µ–Ω—Ç—É. –ü–æ–≤—ñ–¥–æ–º—Ç–µ –π–æ–º—É –ø—Ä–æ –≥—Ä—É –æ—Å–æ–±–∏—Å—Ç–æ.');
          }
        }
        
        // –û—á–∏—â–µ–Ω–Ω—è —Å–µ—Å—ñ—ó
        ctx.session = {};
      } catch (error) {
        await ctx.reply(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—ñ –≥—Ä–∏: ${error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}`);
      }
      break;
  }
}

/**
 * –û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –¥—ñ–∞–ª–æ–≥—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
 */
export async function handleAddResultFlow(ctx: BotContext, text: string): Promise<void> {
  if (ctx.session.step === 'add_result_score') {
    ctx.session.gameData = {
      ...ctx.session.gameData,
      score: text
    };
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –≥—Ä–∏ –¥–ª—è –ø–æ–∫–∞–∑—É –æ–ø—Ü—ñ–π –≤–∏–±–æ—Ä—É –ø–µ—Ä–µ–º–æ–∂—Ü—è
    const gameId = ctx.session.gameData?.gameId;
    if (!gameId) {
      await ctx.reply('‚ùå –ì—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.');
      return;
    }
    
    try {
      const game = await gameModel.getGameById(gameId);
      if (!game) {
        await ctx.reply('‚ùå –ì—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.');
        return;
      }
      
      ctx.session.step = 'add_result_winner';
      
      const keyboard = new InlineKeyboard()
        .text(`ü•á ${game.player1Username} –ø–µ—Ä–µ–º—ñ–≥`, `winner_select:${game.player1Id}`).row()
        .text(`ü•á ${game.player2Username} –ø–µ—Ä–µ–º—ñ–≥`, `winner_select:${game.player2Id}`).row()
        .text('‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', 'main_menu');
      
      await ctx.reply(`üìù –†–∞—Ö—É–Ω–æ–∫ –∑–∞–ø–∏—Å–∞–Ω–æ: ${text}. –•—Ç–æ –≤–∏–≥—Ä–∞–≤ –º–∞—Ç—á?`, {
        reply_markup: keyboard
      });
    } catch (error) {
      console.error('Error in handleAddResultFlow:', error);
      await ctx.reply('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.', {
        reply_markup: createBackToMenuKeyboard()
      });
    }
  }
}