import { Context, SessionFlavor } from 'grammy';
import * as gameModel from '../../models/GameModel';
import { BotSession, GameStatus } from '../../models/types';
import { createBackToMenuKeyboard } from '../keyboards';

type BotContext = Context & SessionFlavor<BotSession>;

/**
 * –û–±—Ä–æ–±–Ω–∏–∫ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –Ω–∞ –≥—Ä—É
 */
export async function handleConfirmGame(ctx: BotContext): Promise<void> {
  const gameId = ctx.match?.[1];
  if (!gameId) {
    await ctx.editMessageText('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤\'—è–∂—ñ—Ç—å—Å—è –∑ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä–æ–º –≥—Ä–∏.', {
      reply_markup: createBackToMenuKeyboard()
    });
    return;
  }

  console.log(`Processing confirm_game with gameId: ${gameId}`);

  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∏–≥—Ä–µ
    const game = await gameModel.getGameById(gameId);
    console.log(`Game found for ID ${gameId}:`, game);

    if (!game) {
      await ctx.editMessageText('‚ùå –ì—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ú–æ–∂–ª–∏–≤–æ, –≤–æ–Ω–∞ –±—É–ª–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞.', {
        reply_markup: createBackToMenuKeyboard()
      });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –æ–ø–ø–æ–Ω–µ–Ω—Ç–æ–º –≤ –∏–≥—Ä–µ
    const user = ctx.from;
    if (!user || (user.id !== game.player2Id)) {
      await ctx.editMessageText('‚õî –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ü—é –≥—Ä—É, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∞ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è —ñ–Ω—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.', {
        reply_markup: createBackToMenuKeyboard()
      });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ –≤—Å–µ –µ—â–µ –≤ —Å—Ç–∞—Ç—É—Å–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    if (game.status !== GameStatus.PENDING) {
      await ctx.editMessageText('‚ö†Ô∏è –¶—è –≥—Ä–∞ –≤–∂–µ –Ω–µ –æ—á—ñ–∫—É—î –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.', {
        reply_markup: createBackToMenuKeyboard()
      });
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã –Ω–∞ "–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ"
    await gameModel.updateGame(gameId, {
      status: GameStatus.SCHEDULED,
      updatedAt: new Date()
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–ø–æ–Ω–µ–Ω—Ç—É
    await ctx.editMessageText(`‚úÖ –í–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –≥—Ä—É –∑ @${game.player1Username} –Ω–∞ ${new Date(game.scheduledTime).toLocaleString()}. üéæ –ì—Ä–∞ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∞!`, {
      reply_markup: createBackToMenuKeyboard()
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É
    try {
      await ctx.api.sendMessage(
        game.player1Id,
        `üéâ @${game.player2Username} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤(–ª–∞) –≤–∞—à—É –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –∑—ñ–≥—Ä–∞—Ç–∏ –≤ —Ç–µ–Ω—ñ—Å ${new Date(game.scheduledTime).toLocaleString()}. üéæ –ì—Ä–∞ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∞!`
      );
    } catch (error) {
      console.error('Error sending confirmation notification to initiator:', error);
    }
  } catch (error) {
    console.error(`Error handling game confirmation for ID ${gameId}:`, error);
    await ctx.editMessageText('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—ñ –≥—Ä–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.', {
      reply_markup: createBackToMenuKeyboard()
    });
  }
}

/**
 * –û–±—Ä–æ–±–Ω–∏–∫ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –Ω–∞ –≥—Ä—É
 */
export async function handleRejectGame(ctx: BotContext): Promise<void> {
  const gameId = ctx.match?.[1];
  if (!gameId) {
    await ctx.editMessageText('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤\'—è–∂—ñ—Ç—å—Å—è –∑ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä–æ–º –≥—Ä–∏.', {
      reply_markup: createBackToMenuKeyboard()
    });
    return;
  }

  console.log(`Processing reject_game with gameId: ${gameId}`);

  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∏–≥—Ä–µ
    const game = await gameModel.getGameById(gameId);
    console.log(`Game found for ID ${gameId}:`, game);

    if (!game) {
      await ctx.editMessageText('‚ùå –ì—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ú–æ–∂–ª–∏–≤–æ, –≤–æ–Ω–∞ –±—É–ª–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞.', {
        reply_markup: createBackToMenuKeyboard()
      });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –æ–ø–ø–æ–Ω–µ–Ω—Ç–æ–º –≤ –∏–≥—Ä–µ
    const user = ctx.from;
    if (!user || (user.id !== game.player2Id)) {
      await ctx.editMessageText('‚õî –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ñ–¥—Ö–∏–ª–∏—Ç–∏ —Ü—é –≥—Ä—É, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∞ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è —ñ–Ω—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.', {
        reply_markup: createBackToMenuKeyboard()
      });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ –≤—Å–µ –µ—â–µ –≤ —Å—Ç–∞—Ç—É—Å–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    if (game.status !== GameStatus.PENDING) {
      await ctx.editMessageText('‚ö†Ô∏è –¶—è –≥—Ä–∞ –≤–∂–µ –Ω–µ –æ—á—ñ–∫—É—î –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.', {
        reply_markup: createBackToMenuKeyboard()
      });
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã –Ω–∞ "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ"
    await gameModel.updateGame(gameId, {
      status: GameStatus.REJECTED,
      updatedAt: new Date()
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–ø–æ–Ω–µ–Ω—Ç—É
    await ctx.editMessageText(`‚ùå –í–∏ –≤—ñ–¥—Ö–∏–ª–∏–ª–∏ –≥—Ä—É –∑ @${game.player1Username} –Ω–∞ ${new Date(game.scheduledTime).toLocaleString()}.`, {
      reply_markup: createBackToMenuKeyboard()
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É
    try {
      await ctx.api.sendMessage(
        game.player1Id,
        `‚õî @${game.player2Username} –≤—ñ–¥—Ö–∏–ª–∏–≤(–ª–∞) –≤–∞—à—É –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –∑—ñ–≥—Ä–∞—Ç–∏ –≤ —Ç–µ–Ω—ñ—Å ${new Date(game.scheduledTime).toLocaleString()}.`
      );
    } catch (error) {
      console.error('Error sending rejection notification to initiator:', error);
    }
  } catch (error) {
    console.error(`Error handling game rejection for ID ${gameId}:`, error);
    await ctx.editMessageText('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—ñ –≥—Ä–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.', {
      reply_markup: createBackToMenuKeyboard()
    });
  }
}