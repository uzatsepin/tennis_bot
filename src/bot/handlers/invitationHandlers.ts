import { BotContext } from '../BotService';
import * as gameModel from '../../models/GameModel';
import { GameStatus } from '../../models/types';

/**
 * –û–±—Ä–æ–±–Ω–∏–∫ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≥—Ä–∏
 */
export async function handleConfirmGame(ctx: BotContext): Promise<void> {
  try {
    // –û—Ç—Ä–∏–º—É—î–º–æ ID –≥—Ä–∏ –∑ –¥–∞–Ω–∏—Ö callback
    const gameId = ctx.callbackQuery?.data?.split(':')[1];
    
    if (!gameId) {
      await ctx.answerCallbackQuery({
        text: '‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –≥—Ä–∏',
        show_alert: true
      });
      return;
    }
    
    // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≥—Ä—É
    const game = await gameModel.getGameById(gameId);
    
    if (!game) {
      await ctx.answerCallbackQuery({
        text: '‚ùå –ü–æ–º–∏–ª–∫–∞: –ì—Ä—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
        show_alert: true
      });
      return;
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –≥—Ä–∞ –æ—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    if (game.status !== GameStatus.PENDING) {
      await ctx.answerCallbackQuery({
        text: '‚ö†Ô∏è –¶—è –≥—Ä–∞ –≤–∂–µ –Ω–µ –æ—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è',
        show_alert: true
      });
      return;
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á, —è–∫–∏–π –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É, —î –∑–∞–ø—Ä–æ—à–µ–Ω–∏–º –≥—Ä–∞–≤—Ü–µ–º
    const currentUserId = ctx.from?.id;
    if (game.player2Id !== currentUserId) {
      await ctx.answerCallbackQuery({
        text: '‚õî –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ü—é –≥—Ä—É',
        show_alert: true
      });
      return;
    }
    
    // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –≥—Ä–∏ –Ω–∞ "–∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—É"
    await gameModel.updateGameStatus(gameId, GameStatus.SCHEDULED);
    
    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    await ctx.answerCallbackQuery({
      text: '‚úÖ –ì—Ä—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! –û—á—ñ–∫—É—î–º–æ –≤–∞—Å –Ω–∞ –∫–æ—Ä—Ç—ñ.',
      show_alert: true
    });
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –∫–Ω–æ–ø–∫–∏
    await ctx.editMessageText(
      `üéæ –ì—Ä—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! ‚úÖ\n\n–ì—Ä–∞–≤–µ—Ü—å: ${game.player1Username}\n–î–∞—Ç–∞: ${new Date(game.scheduledTime).toLocaleDateString('uk-UA', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      })}\n\n–ì–∞—Ä–Ω–æ—ó –≥—Ä–∏! üèÜ`
    );
    
    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—é, —è–∫–∏–π —Å—Ç–≤–æ—Ä–∏–≤ –≥—Ä—É
    await ctx.api.sendMessage(
      game.player1Id,
      `üéâ –ì—Ä–∞–≤–µ—Ü—å ${game.player2Username} –ø—Ä–∏–π–Ω—è–≤ –≤–∞—à–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –Ω–∞ –≥—Ä—É!\n\n–î–∞—Ç–∞: ${new Date(game.scheduledTime).toLocaleDateString('uk-UA', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      })}\n\n–ì–∞—Ä–Ω–æ—ó –≥—Ä–∏! üèÜ`
    );
    
  } catch (error) {
    console.error('Error handling game confirmation:', error);
    await ctx.answerCallbackQuery({
      text: '‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—ñ –≥—Ä–∏',
      show_alert: true
    });
  }
}

/**
 * –û–±—Ä–æ–±–Ω–∏–∫ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –≥—Ä–∏
 */
export async function handleRejectGame(ctx: BotContext): Promise<void> {
  try {
    // –û—Ç—Ä–∏–º—É—î–º–æ ID –≥—Ä–∏ –∑ –¥–∞–Ω–∏—Ö callback
    const gameId = ctx.callbackQuery?.data?.split(':')[1];
    
    if (!gameId) {
      await ctx.answerCallbackQuery({
        text: '‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –≥—Ä–∏',
        show_alert: true
      });
      return;
    }
    
    // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≥—Ä—É
    const game = await gameModel.getGameById(gameId);
    
    if (!game) {
      await ctx.answerCallbackQuery({
        text: '‚ùå –ü–æ–º–∏–ª–∫–∞: –ì—Ä—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
        show_alert: true
      });
      return;
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –≥—Ä–∞ –æ—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    if (game.status !== GameStatus.PENDING) {
      await ctx.answerCallbackQuery({
        text: '‚ö†Ô∏è –¶—è –≥—Ä–∞ –≤–∂–µ –Ω–µ –æ—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è',
        show_alert: true
      });
      return;
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á, —è–∫–∏–π –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É, —î –∑–∞–ø—Ä–æ—à–µ–Ω–∏–º –≥—Ä–∞–≤—Ü–µ–º
    const currentUserId = ctx.from?.id;
    if (game.player2Id !== currentUserId) {
      await ctx.answerCallbackQuery({
        text: '‚õî –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ñ–¥—Ö–∏–ª–∏—Ç–∏ —Ü—é –≥—Ä—É',
        show_alert: true
      });
      return;
    }
    
    // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –≥—Ä–∏ –Ω–∞ "–≤—ñ–¥—Ö–∏–ª–µ–Ω–æ"
    await gameModel.updateGameStatus(gameId, GameStatus.REJECTED);
    
    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è
    await ctx.answerCallbackQuery({
      text: '‚ùå –í–∏ –≤—ñ–¥—Ö–∏–ª–∏–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –Ω–∞ –≥—Ä—É',
      show_alert: true
    });
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –∫–Ω–æ–ø–∫–∏
    await ctx.editMessageText(
      `üéæ –ì—Ä—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ ‚ùå\n\n–ì—Ä–∞–≤–µ—Ü—å: ${game.player1Username}\n–î–∞—Ç–∞: ${new Date(game.scheduledTime).toLocaleDateString('uk-UA', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      })}`
    );
    
    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—é, —è–∫–∏–π —Å—Ç–≤–æ—Ä–∏–≤ –≥—Ä—É
    await ctx.api.sendMessage(
      game.player1Id,
      `üòî –ù–∞ –∂–∞–ª—å, –≥—Ä–∞–≤–µ—Ü—å ${game.player2Username} –≤—ñ–¥—Ö–∏–ª–∏–≤ –≤–∞—à–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –Ω–∞ –≥—Ä—É.\n\n–î–∞—Ç–∞: ${new Date(game.scheduledTime).toLocaleDateString('uk-UA', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      })}`
    );
    
  } catch (error) {
    console.error('Error handling game rejection:', error);
    await ctx.answerCallbackQuery({
      text: '‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—ñ –≥—Ä–∏',
      show_alert: true
    });
  }
}