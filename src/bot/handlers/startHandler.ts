import { Context } from 'grammy';
import * as userModel from '../../models/UserModel';
import { createMainMenuKeyboard } from '../keyboards';

/**
 * –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
 */
export async function handleStartCommand(ctx: Context): Promise<void> {
  const user = ctx.from;
  if (!user) return;

  try {
    const existingUser = await userModel.findUserByTelegramId(user.id);
    
    if (existingUser) {
      await ctx.reply(`üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –Ω–∞–∑–∞–¥, ${user.first_name}! –ì–æ—Ç–æ–≤—ñ –∑—ñ–≥—Ä–∞—Ç–∏ –≤ —Ç–µ–Ω—ñ—Å? üéæ`);
    } else {
      // –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      const newUser = {
        telegramId: user.id,
        username: user.username || `user_${user.id}`,
        firstName: user.first_name,
        lastName: user.last_name || '',
        points: 0,
        gamesPlayed: 0,
        gamesWon: 0,
        gamesLost: 0,
        createdAt: new Date(),
        updatedAt: new Date()
      };
      
      await userModel.createUser(newUser);
      await ctx.reply(`üéâ –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –±–æ—Ç–∞ —Ç–µ–Ω—ñ—Å–Ω–æ–≥–æ –∫–ª—É–±—É, ${user.first_name}! –í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. üéæ`);
    }
    
    await showMainMenu(ctx);
  } catch (error) {
    console.error('Error in start command:', error);
    await ctx.reply('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–æ–º–∞–Ω–¥–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É –ø—ñ–∑–Ω—ñ—à–µ.');
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
 */
export async function showMainMenu(ctx: Context): Promise<void> {
  const keyboard = createMainMenuKeyboard();
  
  await ctx.reply('üì± –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é - –©–æ –≤–∏ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏?', {
    reply_markup: keyboard
  });
}