import { Context, SessionFlavor } from 'grammy';
import * as userModel from '../../models/UserModel';
import * as gameModel from '../../models/GameModel';
import * as rankingModel from '../../models/RankingModel';
import { BotSession } from '../../models/types';
import { createBackToMenuKeyboard } from '../keyboards';

type BotContext = Context & SessionFlavor<BotSession>;

/**
 * –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
 */
export async function handleMyStats(ctx: BotContext): Promise<void> {
  const user = ctx.from;
  if (!user) return;
  
  try {
    const userData = await userModel.findUserByTelegramId(user.id);
    if (!userData) {
      await ctx.editMessageText('‚ùì –í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–æ–º–∞–Ω–¥–æ—é /start –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.', {
        reply_markup: createBackToMenuKeyboard()
      });
      return;
    }
    
    const ranking = await rankingModel.getUserRanking(user.id);
    const rank = ranking ? ranking.position : '–ù/–î';
    
    const lastGame = await gameModel.getLastGame(user.id);
    const lastGameInfo = lastGame 
      ? `üîÑ –û—Å—Ç–∞–Ω–Ω—è –≥—Ä–∞: ${lastGame.player1Username} vs ${lastGame.player2Username} (${new Date(lastGame.scheduledTime).toLocaleDateString()})` 
      : 'üì≠ –ù–µ–º–∞—î –∑—ñ–≥—Ä–∞–Ω–∏—Ö —ñ–≥–æ—Ä';
    
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–π—á–∞—Å—Ç—ñ—à–æ–≥–æ –æ–ø–æ–Ω–µ–Ω—Ç–∞
    const opponents = await gameModel.getMostFrequentOpponents(user.id, 1);
    const frequentOpponent = opponents.length > 0 
      ? `üë• –ù–∞–π—á–∞—Å—Ç—ñ—à–∏–π –æ–ø–æ–Ω–µ–Ω—Ç: ${opponents[0].opponentUsername} (${opponents[0].gamesCount} —ñ–≥–æ—Ä)` 
      : 'üë§ –ü–æ–∫–∏ –Ω–µ–º–∞—î –ø–æ—Å—Ç—ñ–π–Ω–∏—Ö –æ–ø–æ–Ω–µ–Ω—Ç—ñ–≤';
    
    const statsMessage = `
üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

üéæ –í—Å—å–æ–≥–æ —ñ–≥–æ—Ä: ${userData.gamesPlayed}
ü•á –ü–µ—Ä–µ–º–æ–≥: ${userData.gamesWon}
‚ùå –ü–æ—Ä–∞–∑–æ–∫: ${userData.gamesLost}
üíØ –û—á–∫–∏: ${userData.points}
üèÜ –†–µ–π—Ç–∏–Ω–≥: ${rank}

${frequentOpponent}
${lastGameInfo}
`;
    
    await ctx.editMessageText(statsMessage, {
      reply_markup: createBackToMenuKeyboard()
    });
  } catch (error) {
    console.error('Error in handleMyStats:', error);
    await ctx.editMessageText('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.', {
      reply_markup: createBackToMenuKeyboard()
    });
  }
}

/**
 * –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–µ–π—Ç–∏–Ω–≥"
 */
export async function handleRankings(ctx: BotContext): Promise<void> {
  try {
    const rankings = await rankingModel.getRankings(10);
    
    if (rankings.length === 0) {
      await ctx.editMessageText('‚ö†Ô∏è –†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –ó—ñ–≥—Ä–∞–π—Ç–µ –∫—ñ–ª—å–∫–∞ —ñ–≥–æ—Ä —Å–ø–æ—á–∞—Ç–∫—É!', {
        reply_markup: createBackToMenuKeyboard()
      });
      return;
    }
    
    let rankingsMessage = 'üèÜ –†–µ–π—Ç–∏–Ω–≥ –≥—Ä–∞–≤—Ü—ñ–≤:\n\n';
    
    // –î–æ–¥–∞—î–º–æ –º–µ–¥–∞–ª—ñ –¥–ª—è —Ç–æ–ø-3 –≥—Ä–∞–≤—Ü—ñ–≤
    for (let i = 0; i < rankings.length; i++) {
      const ranking = rankings[i];
      let prefix = `${ranking.position}.`;
      
      // –î–æ–¥–∞—î–º–æ –º–µ–¥–∞–ª—ñ –¥–ª—è —Ç–æ–ø-3
      if (ranking.position === 1) {
        prefix = 'ü•á';
      } else if (ranking.position === 2) {
        prefix = 'ü•à';
      } else if (ranking.position === 3) {
        prefix = 'ü•â';
      }
      
      rankingsMessage += `${prefix} ${ranking.username} - ${ranking.points} –æ—á–∫—ñ–≤\n`;
    }
    
    await ctx.editMessageText(rankingsMessage, {
      reply_markup: createBackToMenuKeyboard()
    });
  } catch (error) {
    console.error('Error in handleRankings:', error);
    await ctx.editMessageText('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ä–µ–π—Ç–∏–Ω–≥—É. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.', {
      reply_markup: createBackToMenuKeyboard()
    });
  }
}