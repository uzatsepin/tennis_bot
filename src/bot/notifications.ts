import { Game } from '../models/types';
import { getBotInstance } from './botInstance';
import { createMainMenuKeyboard } from './keyboards';

/**
 * –í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –¥–æ –≥—Ä–∏
 * @param invitedPlayerId ID –≥—Ä–∞–≤—Ü—è, —è–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∏–ª–∏
 * @param inviterPlayerId ID –≥—Ä–∞–≤—Ü—è, —è–∫–∏–π –∑–∞–ø—Ä–æ—Å–∏–≤
 * @param game –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≥—Ä—É
 */
export async function sendGameInvitation(
  invitedPlayerId: number,
  inviterPlayerId: number,
  game: Game
): Promise<void> {
  try {
    const bot = getBotInstance();
    
    // –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç—É —Ç–∞ —á–∞—Å
    const dateOptions: Intl.DateTimeFormatOptions = {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    };
    
    const formattedDate = new Date(game.scheduledTime).toLocaleDateString('uk-UA', dateOptions);
    
    // –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    const message = `
üéæ –í–∞—Å –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –Ω–∞ –≥—Ä—É! üìÖ

üë§ –ì—Ä–∞–≤–µ—Ü—å: ${game.player1Username}
üóìÔ∏è –î–∞—Ç–∞: ${formattedDate}

–î–ª—è –ø—Ä–∏–π–Ω—è—Ç—Ç—è –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.
    `;
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–∏–π–Ω—è—Ç—Ç—è/–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è
    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏', callback_data: `confirm_game:${game._id}` },
          { text: '‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏', callback_data: `reject_game:${game._id}` }
        ]
      ]
    };
    
    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await bot.api.sendMessage(invitedPlayerId, message, {
      parse_mode: 'HTML',
      reply_markup: keyboard
    });
    
    console.log(`Game invitation sent to player ${invitedPlayerId}`);
  } catch (error) {
    console.error('Error sending game invitation:', error);
    throw new Error('Failed to send game invitation');
  }
}

/**
 * –í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≥—Ä–∏
 * @param game –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≥—Ä—É –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
 */
export async function sendGameResults(game: Game): Promise<void> {
  try {
    const bot = getBotInstance();
    
    if (!game.score || !game.winnerId) {
      throw new Error('Game results are incomplete');
    }
    
    // –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–µ—Ä–µ–º–æ–∂—Ü—è —Ç–∞ –ø–µ—Ä–µ–º–æ–∂–µ–Ω–æ–≥–æ
    const winnerId = game.winnerId;
    const loserId = winnerId === game.player1Id ? game.player2Id : game.player1Id;
    const winnerUsername = winnerId === game.player1Id ? game.player1Username : game.player2Username;
    
    // –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–º–æ–∂—Ü—è
    const winnerMessage = `
üèÜ –í—ñ—Ç–∞—î–º–æ –∑ –ø–µ—Ä–µ–º–æ–≥–æ—é! üéâ

üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á—É:
${game.score}

üìà –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –±—É–ª–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.
    `;
    
    // –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–º–æ–∂–µ–Ω–æ–≥–æ
    const loserMessage = `
üéæ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –º–∞—Ç—á—É:

ü•á –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: ${winnerUsername}
üìä –†–∞—Ö—É–Ω–æ–∫: ${game.score}

üìà –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –±—É–ª–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.
    `;
    
    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–±–æ–º –≥—Ä–∞–≤—Ü—è–º
    await Promise.all([
      bot.api.sendMessage(winnerId, winnerMessage, { parse_mode: 'HTML', reply_markup: createMainMenuKeyboard() }),
      bot.api.sendMessage(loserId, loserMessage, { parse_mode: 'HTML', reply_markup: createMainMenuKeyboard() })
    ]);
    
    console.log(`Game results notifications sent for game ${game._id}`);
  } catch (error) {
    console.error('Error sending game results notifications:', error);
    throw new Error('Failed to send game results notifications');
  }
}
