import { Game } from '../models/types';
import { getBotInstance } from './botInstance';

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ –≤ –∏–≥—Ä—É
 * @param invitedPlayerId ID –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏
 * @param inviterPlayerId ID –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≥–ª–∞—Å–∏–ª
 * @param game –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–µ
 */
export async function sendGameInvitation(
  invitedPlayerId: number,
  inviterPlayerId: number,
  game: Game
): Promise<void> {
  try {
    const bot = getBotInstance();
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    const dateOptions: Intl.DateTimeFormatOptions = {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    };
    
    const formattedDate = new Date(game.scheduledTime).toLocaleDateString('ru-RU', dateOptions);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    const message = `
–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –Ω–∞ –∏–≥—Ä—É! üìÖ

–ò–≥—Ä–æ–∫: ${game.player1Username}
–î–∞—Ç–∞: ${formattedDate}

–î–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.
    `;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å', callback_data: `accept_game:${game._id}` },
          { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_game:${game._id}` }
        ]
      ]
    };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.api.sendMessage(invitedPlayerId, message, {
      parse_mode: 'HTML',
      reply_markup: keyboard
    });
    
    console.log(`Game invitation sent to player ${invitedPlayerId}`);
  } catch (error) {
    console.error('Error sending game invitation:', error);
    throw new Error('Failed to send game invitation');
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∏–≥—Ä—ã
 * @param game –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
 */
export async function sendGameResults(game: Game): Promise<void> {
  try {
    const bot = getBotInstance();
    
    if (!game.score || !game.winnerId) {
      throw new Error('Game results are incomplete');
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ
    const winnerId = game.winnerId;
    const loserId = winnerId === game.player1Id ? game.player2Id : game.player1Id;
    const winnerUsername = winnerId === game.player1Id ? game.player1Username : game.player2Username;
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    const winnerMessage = `
üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π! üèÜ

–†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞:
${game.score}

–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω.
    `;
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ
    const loserMessage = `
–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–∞:

–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${winnerUsername}
–°—á–µ—Ç: ${game.score}

–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω.
    `;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º
    await Promise.all([
      bot.api.sendMessage(winnerId, winnerMessage, { parse_mode: 'HTML' }),
      bot.api.sendMessage(loserId, loserMessage, { parse_mode: 'HTML' })
    ]);
    
    console.log(`Game results notifications sent for game ${game._id}`);
  } catch (error) {
    console.error('Error sending game results notifications:', error);
    throw new Error('Failed to send game results notifications');
  }
}
